// server/seedTasks.ts
import "dotenv/config";
import pg from "pg";
import { drizzle } from "drizzle-orm/node-postgres";
import { tasks } from "../shared/schema"; // varmista ett√§ exporttaat tasks-taulun

const { Pool } = pg;

// m√§√§rittele kategoriasi ‚Äì niiden pit√§√§ vastata skeemaa ja APIa
type TaskCategory = "spicy" | "funny" | "party";

const seedData: Record<TaskCategory, string[]> = {
  spicy: [
    "Kerro salaisuus ‚Äì jos et, juo 3 huikkaa ü§´",
    "Anna suudelma poskelle ‚Äì jos et, juo 2 huikkaa üíã",
    "Kerro keneen olet ihastunut ‚Äì jos et, juo 4 huikkaa üíï",
    "N√§yt√§ paras tanssiliikkeesi ‚Äì jos et, juo 2 üíÉ",
    "Soita ex√§llesi (kaiuttimella) ‚Äì jos et, juo 5 üì±",
    "Kerro noloin muistosi ‚Äì jos et, juo 3 üò≥",
    "Tee 5 punnerrusta ‚Äì jos et, juo 2 üí™",
    "Tee 10 kyykky√§ ‚Äì jos et, juo 2 üèãÔ∏è",
    "Anna jollekin 30 sek hieronta ‚Äì jos et, juo 2 üíÜ",
    "Vaihda profiilikuvasi hassuksi 10 min ‚Äì jos et, juo 3 ü§°",
  ],
  funny: [
    "J√§ljittele jotakuta p√∂yd√§ss√§ ‚Äì muut arvaa kuka üé≠",
    "Puhu minuutin ajan vain el√§inten √§√§nill√§ üê∂",
    "Tee mini-standup 30 s üé§",
    "Laula suosikkibiisisi oopperatyylill√§ üéµ",
    "Esit√§ pantomiimi 'kala vedess√§' üêü",
    "Kerro vitsi ‚Äì jos kukaan ei naura, juo 2 üòÑ",
    "Tee TikTok-tanssi üíÉ",
    "Puhu 30 sekuntia nen√§-√§√§nell√§ üëÉ",
    "Keksi 4-sanan runo t√§st√§ porukasta ‚úçÔ∏è",
    "Kerro tarina k√§ytt√§en vain kolme sanaa kerrallaan üìñ",
  ],
  party: [
    "Kaikki p√∂yd√§n ymp√§rill√§ juovat! üçª",
    "Keksi uusi juomis√§√§nt√∂ koko porukalle üìú",
    "Aloita 'Never Have I Ever' -kierros üôà",
    "Kaikki miehet juovat üç∫",
    "Kaikki naiset juovat ü•Ç",
    "Sinun oikealla puolellasi oleva juo 2 ‚û°Ô∏è",
    "Kaikilla, joilla on siniset silm√§t, juo üëÅÔ∏è",
    "Ota 3 huikkaa ja anna 3 huikkaa jollekin üîÑ",
    "Kaikki, joilla on puhelin k√§dess√§, juovat üì±",
    "Vaihda paikkaa jonkun kanssa ‚Äì molemmat juovat üîÅ",
  ],
  
};

async function main() {
  if (!process.env.DATABASE_URL) {
    throw new Error("DATABASE_URL puuttuu (aseta .env tai PowerShelliss√§ $env:DATABASE_URL)");
  }

  const pool = new Pool({ connectionString: process.env.DATABASE_URL });
  const db = drizzle(pool);

  // Rakenna rivit
  const rows = (Object.keys(seedData) as TaskCategory[]).flatMap((category) =>
    seedData[category].map((text) => ({ text, category }))
  );

  // (valinnainen) tyhjenn√§ ennen insertti√§
  // await pool.query("TRUNCATE TABLE tasks RESTART IDENTITY");

  // (valinnainen) jos teit unique-indeksin (text,category), voidaan ohittaa duplikaatit:
  // await db.insert(tasks).values(rows).onConflictDoNothing();

  await db.insert(tasks).values(rows);
  console.log(`‚úÖ Seed OK: ${rows.length} rivi√§`);
  await pool.end();
}

main().catch((e) => {
  console.error("‚ùå Seed ep√§onnistui:", e);
  process.exit(1);
});
